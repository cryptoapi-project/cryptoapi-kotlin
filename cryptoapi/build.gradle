apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka'

Properties properties = new Properties()
if (project.rootProject.file('local.properties').exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")
    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]

    defaultConfig {
        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]
        versionCode globalConfiguration["androidVersionCode"]
        buildConfigField 'String', 'CRYPTO_API_KEY', cryptoApiKey(properties['CRYPTO_API_KEY'])
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/java'
    }
}

dependencies {
    testImplementation libraryDependencies.jUnit
    implementation libraryDependencies.kotlin
    implementation libraryDependencies.googleGson
    implementation libraryDependencies.okhttp
    implementation libraryDependencies.okHttpLogging
    testImplementation libraryDependencies.coroutinesCore

    compileOnly project(":annotation")
    kapt project(':processor')
    implementation project(":model")
}

configurations {
    detekt
}

apply from: "$rootDir/config/publish.gradle"

def cryptoApiKey(value){
    def newValue = project.getProperties().get("cryptoApiKey")

    if (newValue != null) {
        value = newValue
    } else if (value == null){
        value = ""
    }

    return value
}